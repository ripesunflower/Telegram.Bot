trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
      - "**/*.md"

pr:
  - master

variables:
  - template: variables.yml

stages:
  - stage: Build
    displayName: ðŸš§ Build
    jobs:
      - job: Build
        displayName: Build with .NET Core SDK
        pool:
          vmImage: $(vmImage)
        steps:

          - task: UseDotNet@2
            displayName: Install .NET Core SDK
            inputs:
              version: $(sdkVersion)
              packageType: sdk

          - script: dotnet help
            displayName: Initialize .NET Core environment

          - task: DotNetCoreCLI@2
            displayName: Build project with release version
            inputs:
              command: build
              projects: $(projectPath)
              arguments: >
                --configuration $(buildConfiguration)

          - bash: >
              dotnet pack
              --no-build
              --output "$(Build.ArtifactStagingDirectory)/packages/release"
              --configuration $(buildConfiguration)
              $(projectPath)
            displayName: Create release nuget package

          - task: DotNetCoreCLI@2
            displayName: Build project with CI version
            inputs:
              command: build
              projects: $(projectPath)
              arguments: >
                --configuration $(buildConfiguration)
                --version-suffix "$(ciVersionSuffix)"

          - bash: >
              dotnet pack
              --no-build
              --output "$(Build.ArtifactStagingDirectory)/packages/ci"
              --configuration $(buildConfiguration)
              --version-suffix "$(ciVersionSuffix)"
              $(projectPath)
            displayName: Create CI nuget package

          - publish: $(Build.ArtifactStagingDirectory)/packages
            artifact: packages

  - stage: PublishArtifacts
    dependsOn: Build
    displayName: ðŸ“¤ Publish artifacts
    # publish artifacts only for pull requests that is coming from the same repo
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], False))
    jobs:
      - template: jobs/publish-artifacts.yml
        parameters:
          sdkVersion: $(sdkVersion)
          internalfeedName: $(internalfeedName)
          artifact: packages
          packages: $(Pipeline.Workspace)/packages/ci/*.*upkg
          vmImage: $(vmImage)

  - stage: UnitTest
    dependsOn: PublishArtifacts
    displayName: ðŸ§ª Unit test
    condition: succeeded()
    jobs:
      - template: jobs/run-unit-tests.yml
        parameters:
          sdkVersion: $(sdkVersion)
          buildConfiguration: $(buildConfiguration)
          projects: $(unitTestsProject)
          strategies:
            - Ubuntu: ubuntu-18.04

  - stage: Release
    displayName: ðŸš€ Release
    dependsOn: UnitTest
    # don't push release package on pull requests
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: Release
        displayName: Publish package to NuGet
        pool:
          vmImage: $(vmImage)
        steps:

          - checkout: none

          - download: current
            artifact: packages
            patterns: "*/**/*.*upkg"

          - task: UseDotNet@2
            displayName: Install .NET Core SDK
            inputs:
              version: $(sdkVersion)
              packageType: sdk

          - script: dotnet help
            displayName: Initialize .NET Core environment

          - bash: >
              dotnet nuget push
              $(Pipeline.Workspace)/packages/release/*.nupkg
              --api-key $(NugetApiKey)
              --skip-duplicate
              --source https://nuget.org
            displayName: Publish package to NuGet

          - bash: >
              dotnet nuget push
              $(Pipeline.Workspace)/packages/release/*.snupkg
              --api-key $(NugetApiKey)
              --skip-duplicate
              --source https://nuget.org
            displayName: Publish symbols to NuGet
